@page "/statistics"
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Log Statistics</PageTitle>

<div class="container-fluid">
    <h1 class="mt-4">Log Statistics</h1>
    
    <div class="row mt-4">
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Logs by Application</h5>
                </div>
                <div class="card-body">
                    @if (logsByApplication == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (!logsByApplication.Any())
                    {
                        <div class="text-center">No data available.</div>
                    }
                    else
                    {
                        <div class="chart-container" style="position: relative; height:300px;">
                            <canvas id="applicationChart"></canvas>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Logs by Level</h5>
                </div>
                <div class="card-body">
                    @if (logsByLevel == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (!logsByLevel.Any())
                    {
                        <div class="text-center">No data available.</div>
                    }
                    else
                    {
                        <div class="chart-container" style="position: relative; height:300px;">
                            <canvas id="levelChart"></canvas>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-12 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Logs by Date</h5>
                    <div>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn @GetActiveButtonClass("day")" @onclick="@(e => ChangeTimeFrame("day"))">Day</button>
                            <button type="button" class="btn @GetActiveButtonClass("week")" @onclick="@(e => ChangeTimeFrame("week"))">Week</button>
                            <button type="button" class="btn @GetActiveButtonClass("month")" @onclick="@(e => ChangeTimeFrame("month"))">Month</button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (logsByDate == null)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (!logsByDate.Any())
                    {
                        <div class="text-center">No data available.</div>
                    }
                    else
                    {
                        <div class="chart-container" style="position: relative; height:300px;">
                            <canvas id="dateChart"></canvas>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Dictionary<string, int>? logsByApplication;
    private Dictionary<string, int>? logsByLevel;
    private Dictionary<DateTime, int>? logsByDate;
    private string timeFrame = "week";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadStatistics();
    }
    
    private async Task LoadStatistics()
    {
        try
        {
            logsByApplication = await Http.GetFromJsonAsync<Dictionary<string, int>>("api/v1/logs/stats/applications");
            logsByLevel = await Http.GetFromJsonAsync<Dictionary<string, int>>("api/v1/logs/stats/levels");
            
            // Calculate date range based on selected time frame
            DateTime end = DateTime.UtcNow;
            DateTime start = timeFrame switch
            {
                "day" => end.AddDays(-1),
                "week" => end.AddDays(-7),
                "month" => end.AddMonths(-1),
                _ => end.AddDays(-7)
            };
            
            logsByDate = await Http.GetFromJsonAsync<Dictionary<DateTime, int>>(
                $"api/v1/logs/stats/dates?start={start:yyyy-MM-ddTHH:mm:ss}&end={end:yyyy-MM-ddTHH:mm:ss}");
            
            await RenderChartsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
    }
    
    private async Task ChangeTimeFrame(string newTimeFrame)
    {
        timeFrame = newTimeFrame;
        logsByDate = null;
        await LoadStatistics();
    }
    
    private string GetActiveButtonClass(string buttonTimeFrame)
    {
        return timeFrame == buttonTimeFrame ? "btn-primary" : "btn-outline-primary";
    }
    
    private async Task RenderChartsAsync()
    {
        try 
        {
            // Since we may not have interop available in this environment,
            // we'll just log the charts data instead of trying to render them
            Console.WriteLine("Chart data is ready for rendering");
            
            // In a real application with proper JS interop, we would use:
            // await JSRuntime.InvokeVoidAsync("renderApplicationChart", logsByApplication);
            // await JSRuntime.InvokeVoidAsync("renderLevelChart", logsByLevel);
            // await JSRuntime.InvokeVoidAsync("renderDateChart", logsByDate);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rendering charts: {ex.Message}");
        }
    }
} 