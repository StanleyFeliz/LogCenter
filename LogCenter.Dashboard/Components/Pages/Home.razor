@page "/"
@using System.Net.Http.Json
@using System.Text.Json
@using LogCenter.Core.Models
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Log Dashboard</PageTitle>

<div class="container-fluid">
    <h1 class="mt-4">LogCenter Dashboard</h1>
    <div class="row mt-4">
        <div class="col-md-12 mb-4">
            <div class="card">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Log Entries</h5>
                        <div class="d-flex">
                            <input type="text" class="form-control me-2" placeholder="Search logs..." @bind="searchTerm" @bind:event="oninput" @onkeyup="SearchLogs" />
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>Timestamp</th>
                                    <th>Level</th>
                                    <th>Application</th>
                                    <th>Environment</th>
                                    <th>Message</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (logs == null)
                                {
                                    <tr><td colspan="6" class="text-center">Loading...</td></tr>
                                }
                                else if (!logs.Any())
                                {
                                    <tr><td colspan="6" class="text-center">No logs available</td></tr>
                                }
                                else
                                {
                                    @foreach (var log in logs)
                                    {
                                        <tr class="@GetRowClass(log.Level)">
                                            <td>@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td><span class="badge @GetBadgeClass(log.Level)">@log.Level</span></td>
                                            <td>@log.Application</td>
                                            <td>@log.Environment</td>
                                            <td class="text-truncate" style="max-width: 300px;">@log.Message</td>
                                            <td>
                                                <button class="btn btn-sm btn-info" @onclick="() => ViewLogDetails(log)">Details</button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal - use Bootstrap 5 data-bs-* attributes -->
    <div class="modal fade" id="logDetailsModal" tabindex="-1" aria-labelledby="logDetailsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="logDetailsModalLabel">Log Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseModal"></button>
                </div>
                @if (selectedLog != null)
                {
                    <div class="modal-body">
                        <div class="row mb-2">
                            <div class="col-md-3"><strong>ID:</strong></div>
                            <div class="col-md-9">@selectedLog.Id</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-3"><strong>Timestamp:</strong></div>
                            <div class="col-md-9">@selectedLog.Timestamp.ToString("yyyy-MM-dd HH:mm:ss.fff")</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-3"><strong>Level:</strong></div>
                            <div class="col-md-9"><span class="badge @GetBadgeClass(selectedLog.Level)">@selectedLog.Level</span></div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-3"><strong>Application:</strong></div>
                            <div class="col-md-9">@selectedLog.Application</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-3"><strong>Environment:</strong></div>
                            <div class="col-md-9">@selectedLog.Environment</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-3"><strong>Machine Name:</strong></div>
                            <div class="col-md-9">@selectedLog.MachineName</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-3"><strong>Category:</strong></div>
                            <div class="col-md-9">@selectedLog.Category</div>
                        </div>
                        <div class="row mb-2">
                            <div class="col-md-3"><strong>Message:</strong></div>
                            <div class="col-md-9">@selectedLog.Message</div>
                        </div>
                        @if (!string.IsNullOrEmpty(selectedLog.Exception))
                        {
                            <div class="row mb-2">
                                <div class="col-md-3"><strong>Exception:</strong></div>
                                <div class="col-md-9">
                                    <pre class="bg-light p-2 rounded">@selectedLog.Exception</pre>
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(selectedLog.StackTrace))
                        {
                            <div class="row mb-2">
                                <div class="col-md-3"><strong>Stack Trace:</strong></div>
                                <div class="col-md-9">
                                    <pre class="bg-light p-2 rounded">@selectedLog.StackTrace</pre>
                                </div>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(selectedLog.AdditionalData))
                        {
                            <div class="row mb-2">
                                <div class="col-md-3"><strong>Additional Data:</strong></div>
                                <div class="col-md-9">
                                    <pre class="bg-light p-2 rounded">@selectedLog.AdditionalData</pre>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseModal">Close</button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<LogEntry>? logs;
    private LogEntry? selectedLog;
    private string searchTerm = "";
    private System.Timers.Timer debounceTimer;
    private DotNetObjectReference<Home>? objRef;

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        await LoadLogs();
        debounceTimer = new System.Timers.Timer(300);
        debounceTimer.Elapsed += async (sender, e) => await DebounceTimerElapsed();
        debounceTimer.AutoReset = false;
        
        // Set up modal callbacks
        await JSRuntime.InvokeVoidAsync("setupModalCallbacks", "logDetailsModal", objRef);
    }
    
    public void Dispose()
    {
        objRef?.Dispose();
        debounceTimer?.Dispose();
    }

    private async Task LoadLogs()
    {
        try
        {
            logs = await Http.GetFromJsonAsync<List<LogEntry>>("api/v1/logs");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading logs: {ex.Message}");
            logs = new List<LogEntry>();
        }
    }

    private void SearchLogs()
    {
        debounceTimer.Stop();
        debounceTimer.Start();
    }

    private async Task DebounceTimerElapsed()
    {
        await InvokeAsync(async () =>
        {
            try
            {
                if (string.IsNullOrWhiteSpace(searchTerm))
                {
                    await LoadLogs();
                }
                else
                {
                    logs = await Http.GetFromJsonAsync<List<LogEntry>>($"api/v1/logs/search?term={Uri.EscapeDataString(searchTerm)}");
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error searching logs: {ex.Message}");
            }
        });
    }

    private async Task ViewLogDetails(LogEntry log)
    {
        selectedLog = log;
        await Task.Delay(10); // Short delay to allow state to update
        await JSRuntime.InvokeVoidAsync("showBootstrapModal", "logDetailsModal");
    }

    private async Task CloseModal()
    {
        await JSRuntime.InvokeVoidAsync("hideBootstrapModal", "logDetailsModal");
    }
    
    // This will be called by JavaScript when the modal is fully hidden
    [JSInvokable]
    public void OnModalHidden()
    {
        selectedLog = null;
        StateHasChanged();
    }
    
    // This will be called by JavaScript when the modal is fully shown
    [JSInvokable]
    public void OnModalShown()
    {
        // Any action needed when modal is fully shown
        StateHasChanged();
    }

    private string GetRowClass(string level)
    {
        return level.ToLower() switch
        {
            "error" => "table-danger",
            "warning" => "table-warning",
            "information" => "table-info",
            _ => ""
        };
    }

    private string GetBadgeClass(string level)
    {
        return level.ToLower() switch
        {
            "error" => "bg-danger",
            "warning" => "bg-warning",
            "information" => "bg-info",
            "debug" => "bg-secondary",
            "trace" => "bg-light text-dark",
            "critical" => "bg-dark",
            _ => "bg-primary"
        };
    }
} 